{
   "AWSTemplateFormatVersion":"2010-09-09",
   "Description":"Sample CloudFormation Template for CSYE 6225 - Fall 2017",
   "Parameters":{
      "vpcid":{
         "Type":"String"
      },
      "zoneid":{
         "Type":"String"
      },
      "subnetid":{
         "Type":"String"
      },
      "domainname":{
         "Type":"String"
      },
      "stacknameSecurity":{
         "Type":"String"
      },
      "sdomain":{
         "Type":"String"
      },
      "dbuser":{
         "Type":"String"
      },
      "keyPair":{
         "Type":"String"
      },
      "rdsUserName":{
         "Type":"String"
      },
      "rdsPassword":{
         "Type":"String"
      },
      "originalDomain":{
          "Type":"String"
      },
	"certi":{
	  "Type":"String"
	}

   },
   "Resources":{
      "RdsPolicy":{
         "Type":"AWS::IAM::ManagedPolicy",
         "Properties":{
            "Users":[
               {
                  "Ref":"dbuser"
               }
            ],
            "ManagedPolicyName":"AWS_RDS_IAM1",
            "PolicyDocument":{
               "Version":"2012-10-17",
               "Statement":[
                  {
                     "Sid":"Stmt1508975155000",
                     "Effect":"Allow",
                     "Action":[
                        "rds-db:connect"
                     ],
                     "Resource":[
                        "*"
                     ]
                  }
               ]
            }
         }
      },
      "insProfile":{
         "Type":"AWS::IAM::InstanceProfile",
         "Properties":{
            "Roles":[
               {
                  "Ref":"CodeDeployEC2ServiceRole"
               }
            ]
         }
      },
      "LambdaRole":{
         "Type":"AWS::IAM::Role",
         "Properties":{
            "AssumeRolePolicyDocument":{
               "Version":"2012-10-17",
               "Statement":[
                  {
                     "Effect":"Allow",
                     "Principal":{
                        "Service":[
                           "lambda.amazonaws.com"
                        ]
                     },
                     "Action":[
                        "sts:AssumeRole"
                     ]
                  }
               ]
            },
            "ManagedPolicyArns":[
               "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
               "arn:aws:iam::aws:policy/AmazonSESFullAccess"
            ],
            "RoleName":"lambda-role"
         }
      },
      "CodeDeployEC2ServiceRole":{
         "Type":"AWS::IAM::Role",
         "Properties":{
            "ManagedPolicyArns":[
               "arn:aws:iam::aws:policy/AmazonRDSFullAccess",
               "arn:aws:iam::aws:policy/AmazonSNSFullAccess",
               "arn:aws:iam::aws:policy/AmazonS3FullAccess"
            ],
            "AssumeRolePolicyDocument":{
               "Version":"2012-10-17",
               "Statement":[
                  {
                     "Effect":"Allow",
                     "Principal":{
                        "Service":[
                           "ec2.amazonaws.com"
                        ]
                     },
                     "Action":[
                        "sts:AssumeRole"
                     ]
                  }
               ]
            },
            "Path":"/"
         }
      },
      "CodeDeployEC2S3":{
         "Type":"AWS::IAM::Policy",
         "Properties":{
            "PolicyName":"CodeDeployEC2S3",
            "PolicyDocument":{
               "Version":"2012-10-17",
               "Statement":[
                  {
                     "Action":"s3:*",
                     "Effect":"Allow",
                     "Resource":"*"
                  }
               ]
            },
            "Roles":[
               {
                  "Ref":"CodeDeployEC2ServiceRole"
               }
            ]
         }
      },
      "CodeDeployServiceRole":{
         "Type":"AWS::IAM::Role",
         "Properties":{
            "AssumeRolePolicyDocument":{
               "Version":"2012-10-17",
               "Statement":[
                  {
                     "Effect":"Allow",
                     "Principal":{
                        "Service":[
                           "ec2.amazonaws.com"
                        ]
                     },
                     "Action":[
                        "sts:AssumeRole"
                     ]
                  }
               ]
            },
            "Path":"/"
         }
      },
    "LogRolePolicy":{
         "Type":"AWS::IAM::Policy",
         "Properties":{
            "PolicyName":"LogRolePolicy",
            "PolicyDocument":{
               "Version":"2012-10-17",
               "Statement": [
                        {
                           "Effect": "Allow",
                           "Action": [
                              "logs:CreateLogGroup",
                  "logs:CreateLogStream",
                              "logs:PutLogEvents",
                  "logs:DescribeLogStream",
                              "s3:GetObject"
                           ],
                           "Resource": [
                              "arn:aws:logs:*:*:*",
                              "arn:aws:s3:::*"
                           ]
                        }
                     ]
            },
            "Roles":[
               {
                  "Ref":"CodeDeployEC2ServiceRole"
               }
            ]
         }
      },
      "AWSCodeDeployRole":{
         "Type":"AWS::IAM::Policy",
         "Properties":{
            "PolicyName":"AWSCodeDeployRole",
            "PolicyDocument":{
               "Version":"2012-10-17",
               "Statement":[
                  {
                     "Effect":"Allow",
                     "Action":[
                        "autoscaling:CompleteLifecycleAction",
                        "autoscaling:DeleteLifecycleHook",
                        "autoscaling:DescribeAutoScalingGroups",
                        "autoscaling:DescribeLifecycleHooks",
                        "autoscaling:PutLifecycleHook",
                        "autoscaling:RecordLifecycleActionHeartbeat",
                        "autoscaling:CreateAutoScalingGroup",
                        "autoscaling:UpdateAutoScalingGroup",
                        "autoscaling:EnableMetricsCollection",
                        "autoscaling:DescribeAutoScalingGroups",
                        "autoscaling:DescribePolicies",
                        "autoscaling:DescribeScheduledActions",
                        "autoscaling:DescribeNotificationConfigurations",
                        "autoscaling:DescribeLifecycleHooks",
                        "autoscaling:SuspendProcesses",
                        "autoscaling:ResumeProcesses",
                        "autoscaling:AttachLoadBalancers",
                        "autoscaling:PutScalingPolicy",
                        "autoscaling:PutScheduledUpdateGroupAction",
                        "autoscaling:PutNotificationConfiguration",
                        "autoscaling:PutLifecycleHook",
                        "autoscaling:DescribeScalingActivities",
                        "autoscaling:DeleteAutoScalingGroup",
                        "ec2:DescribeInstances",
                        "ec2:DescribeInstanceStatus",
                        "ec2:TerminateInstances",
                        "tag:GetTags",
                        "tag:GetResources",
                        "sns:Publish",
                        "cloudwatch:DescribeAlarms",
                        "cloudwatch:PutMetricAlarm",
                        "elasticloadbalancing:DescribeLoadBalancers",
                        "elasticloadbalancing:DescribeInstanceHealth",
                        "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                        "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                        "elasticloadbalancing:DescribeTargetGroups",
                        "elasticloadbalancing:DescribeTargetHealth",
                        "elasticloadbalancing:RegisterTargets",
                        "elasticloadbalancing:DeregisterTargets"
                     ],
                     "Resource":"*"
                  }
               ]
            },
            "Roles":[
               {
                  "Ref":"CodeDeployServiceRole"
               }
            ]
         }
      },
      "S3Bucket":{
         "Type":"AWS::S3::Bucket",
         "Properties":{
            "BucketName":{
               "Ref":"sdomain"
            }
         }
      },
      "EC2Instance":{
         "Type":"AWS::AutoScaling::LaunchConfiguration",
        
         "Properties":{
        "AssociatePublicIpAddress": true,
            "KeyName":{
               "Ref":"keyPair"
            },
           
            "ImageId":"ami-cd0f5cb6",
            "InstanceType":"t2.micro",
            "IamInstanceProfile":{
               "Ref":"insProfile"
            },
            "UserData":{
               "Fn::Base64":{
                  "Fn::Join":[
                     "",
                     [
                        "#!/bin/bash -v \n",
                        "apt-get update \n",
                        "apt-get install default-jdk -y \n",
                        "update alternatives --config java \n",
                        "echo 'JAVA_HOME=\"/usr/lib/jvm/java-8-opensdk-amd64/jre/bin/java\"' > /etc/environment \n",
                        "source /etc/environment \n",
                        "apt-get update \n",
                        "groupadd tomcat \n",
                        "sudo apt-get install tomcat8 -y \n",
                        "apt-get update \n",
                        "apt-get install curl -y \n",
                        "echo '#!/bin/sh' > /usr/share/tomcat8/bin/setenv.sh \n",
                        {
                           "Fn::Join":[
                              "",
                              [
                                 "echo 'JAVA_OPTS=\"$JAVA_OPTS -Dspring.datasource.url=\"jdbc:mysql://",
                                 {
                                    "Fn::GetAtt":[
                                       "DBinstance",
                                       "Endpoint.Address"
                                    ]
                                 },
                                 ":3306/csye6225\"\"'>> /usr/share/tomcat8/bin/setenv.sh \n"
                              ]
                           ]
                        },
                        "echo 'JAVA_OPTS=\"$JAVA_OPTS -Dspring.datasource.username=\"",
                        {
                           "Ref":"rdsUserName"
                        },
                        "\"\"' >> /usr/share/tomcat8/bin/setenv.sh \n",
                        "echo 'JAVA_OPTS=\"$JAVA_OPTS -Dspring.datasource.password=\"",
                        {
                           "Ref":"rdsPassword"
                        },
                        "\"\"' >> /usr/share/tomcat8/bin/setenv.sh \n",
                        "chmod -R 777 bin/* \n",
                        "rm -rf /var/lib/tomcat8/webapps/ROOT\n",
                        "apt-get install ruby -y \n",
                        "cd /home/ubuntu \n",
                        "curl -O https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install \n",
                        "chmod +x ./install \n",
                        "./install auto \n",
                        "apt-get update -y \n",
                        "apt-get install python -y \n",
                       
            		"echo ' ' > /home/ubuntu/awslogs.conf \n",

                        "wget https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py \n",
                        "python ./awslogs-agent-setup.py --region us-east-1 --non-interactive --configfile=/home/ubuntu/awslogs.conf \n",
                        "rm -rf /home/ubuntu/awslogs.conf\n"
                     ]
                  ]
               }
            },
            "SecurityGroups":[
               {
                  "Fn::GetAtt":[
                     "WebServerSecurityGroup",
                     "GroupId"
                  ]
               }
            ],
            "BlockDeviceMappings":[
               {
                  "DeviceName":"/dev/sda1",
                  "Ebs":{
                     "VolumeSize":16,
                     "VolumeType":"gp2"
                  }
               }
            ]
           
         }
      },
      "WebServerSecurityGroup":{
         "Type":"AWS::EC2::SecurityGroup",
         "Properties":{
            "GroupDescription":"Enable HTTP access via port 80, SSH access via port 22",
            "VpcId":{
               "Ref":"vpcid"
            },
            "GroupName":{
               "Ref":"stacknameSecurity"
            },
            "SecurityGroupIngress":[
               {
                  "IpProtocol":"tcp",
                  "FromPort":"80",
                  "ToPort":"80",
                  "CidrIp":"0.0.0.0/0"
               },
               {
                  "IpProtocol":"tcp",
                  "FromPort":"22",
                  "ToPort":"22",
                  "CidrIp":"0.0.0.0/0"
               },
               {
                  "IpProtocol":"tcp",
                  "FromPort":"443",
                  "ToPort":"443",
                  "CidrIp":"0.0.0.0/0"
               },
               {
            "IpProtocol": "tcp",
            "FromPort": "8080",
            "ToPort": "8080",
            "SourceSecurityGroupId": {
              "Fn::GetAtt": [
                "LoadBalancerSecurityGroup",
                "GroupId"
              ]
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8080",
            "ToPort": "8080",
            "SourceSecurityGroupId": {
              "Fn::GetAtt": [
                "LoadBalancerSecurityGroup",
                "GroupId"
              ]
            }
          }
            ]
         }
      },
      "LoadBalancerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": "csye6225-fall2017-placeHolder-loadBalancer",
        "GroupDescription": "Rules For LoadBalancer",
        "VpcId":{
               "Ref":"vpcid"
            },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIpv6": "::/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8080",
            "ToPort": "8080",
            "CidrIpv6": "::/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8080",
            "ToPort": "8080",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
      "myDNSRecord": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "Comment": "DNS name for my instance.",
        "HostedZoneName":{
               "Ref":"originalDomain"
            },
        "Name" : {
               "Ref":"originalDomain"
            },
        "Type": "A",
        "AliasTarget": {
          "HostedZoneId": {
            "Fn::GetAtt": [
              "ApplicationLoadBalancer",
              "CanonicalHostedZoneID"
            ]
          },
          "DNSName": {
            "Fn::GetAtt": [
              "ApplicationLoadBalancer",
              "DNSName"
            ]
          }
        }
      }
    },
      "Subnet1":{
         "Type":"AWS::EC2::Subnet",
         "Properties":{
            "VpcId":{
               "Ref":"vpcid"
            },
            "AvailabilityZone":"us-east-1a",
            "CidrBlock":"172.31.120.0/26"
         }
      },
      "Subnet2":{
         "Type":"AWS::EC2::Subnet",
         "Properties":{
            "VpcId":{
               "Ref":"vpcid"
            },
            "AvailabilityZone":"us-east-1b",
            "CidrBlock":"172.31.100.0/26"
         }
      },
      "Subnet3":{
         "Type":"AWS::EC2::Subnet",
         "Properties":{
            "VpcId":{
               "Ref":"vpcid"
            },
            "AvailabilityZone":"us-east-1f",
            "CidrBlock":"172.31.110.0/26"
         }
      },
      "RDSSubnetGroup":{
         "Type":"AWS::RDS::DBSubnetGroup",
         "Properties":{
            "DBSubnetGroupDescription":"Multiple Subnet Groups",
            "SubnetIds":[
               {
                  "Ref":"Subnet1"
               },
               {
                  "Ref":"Subnet2"
               },
               {
                  "Ref":"Subnet3"
               }
            ]
         }
      },
      "csye6225rds":{
         "Type":"AWS::EC2::SecurityGroup",
         "Properties":{
            "GroupDescription":"Enable HTTP access via port 3306",
            "GroupName":"csye6225rds",
            "SecurityGroupIngress":[
               {
                  "IpProtocol":"tcp",
                  "FromPort":"3306",
                  "ToPort":"3306",
                  "SourceSecurityGroupId":{
                     "Fn::GetAtt":[
                        "WebServerSecurityGroup",
                        "GroupId"
                     ]
                  }
               }
            ]
         }
      },
              "MyServerGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "Tags": [{
                    "Key": "name",
                    "Value": "csye6225",
                    "PropagateAtLaunch": true
                }],
                "VPCZoneIdentifier" :[{
                        "Ref": "Subnet1"
                    },
                    {
                        "Ref": "Subnet2"
                    },
                    {
                        "Ref": "Subnet3"
                    }],
                "LaunchConfigurationName": {
                    "Ref": "EC2Instance"
                },
                "MinSize": "3",
                "MaxSize": "3",
                "TargetGroupARNs": [{
                    "Ref": "ALBTargetGroup"
                }]
            },
            "DependsOn": [
            "ALBListener",
            "EC2Instance"
              ]
        },
        "ALBListener": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "Certificates":[{"CertificateArn":{"Ref" :"certi"}}],

                "DefaultActions": [{
                    "Type": "forward",
                    "TargetGroupArn": {
                        "Ref": "ALBTargetGroup"
                    }
                }],
                "LoadBalancerArn": {
                    "Ref": "ApplicationLoadBalancer"
                },
                "Port": "443",
                "Protocol": "HTTPS"
            }
        },
        "ApplicationLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties": {
                "Scheme": "internet-facing",
                "Tags": [{
                    "Key": "name",
                    "Value": "csye6225"
                }],
                "Type":"application",
                "IpAddressType":"ipv4",
                "Subnets": [{
                        "Ref": "Subnet1"
                    },
                    {
                        "Ref": "Subnet2"
                    },
                    {
                        "Ref": "Subnet3"
                    }],
                "LoadBalancerAttributes": [
          {
            "Key": "idle_timeout.timeout_seconds",
            "Value": "60"
          }
        ],
                "SecurityGroups": [{
                    "Ref": "LoadBalancerSecurityGroup"
                }]
            }
        },
        "ALBTargetGroup": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "Tags": [{
                    "Key": "name",
                    "Value": "csye6225"
                }],
                "HealthCheckIntervalSeconds": 40,
                "UnhealthyThresholdCount": 10,
               
                "Name": "CsyeTargetGroup",
               
                "Protocol": "HTTP",
        "HealthCheckProtocol": "HTTP",
        "HealthCheckPort": "8080",
        "TargetGroupAttributes": [
          {
            "Key": "deregistration_delay.timeout_seconds",
            "Value": "20"
          }
        ],
        "Port": 8080,
                "VpcId": {
                    "Ref": "vpcid"
                }
               
            }
        },
    "DBinstance":{
         "Type":"AWS::RDS::DBInstance",
         "Properties":{
            "Engine":"MySQL",
            "AllocatedStorage":"10",
            "DBInstanceClass":"db.t2.medium",
            "MultiAZ":"False",
            "VPCSecurityGroups":[
               {
                  "Fn::GetAtt":[
                     "csye6225rds",
                     "GroupId"
                  ]
               }
            ],
            "DBInstanceIdentifier":"csye6225-fall2017",
            "MasterUserPassword":{
               "Ref":"rdsPassword"
            },
            "MasterUsername":{
               "Ref":"rdsUserName"
            },
            "PubliclyAccessible":"False",
            "DBName":"csye6225",
            "DBSubnetGroupName":{
               "Ref":"RDSSubnetGroup"
            }
         }
      },
      "DDBTable":{
         "Type":"AWS::DynamoDB::Table",
         "Properties":{
            "AttributeDefinitions":[
               {
                  "AttributeName":"id",
                  "AttributeType":"S"
               }
            ],
            "KeySchema":[
               {
                  "AttributeName":"id",
                  "KeyType":"HASH"
               }
            ],
            "ProvisionedThroughput":{
               "WriteCapacityUnits":5,
               "ReadCapacityUnits":5
            },
            "TableName":"csye6225"
         }
      },

      "Topic" : {
         "Type" : "AWS::SNS::Topic",
         "Properties" : {
            "TopicName": "password_reset"
         }
      }
   }
}
