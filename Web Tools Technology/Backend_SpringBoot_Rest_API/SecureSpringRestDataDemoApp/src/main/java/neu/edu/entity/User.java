package neu.edu.entity;
// Generated 10 Dec, 2017 5:27:37 PM by Hibernate Tools 4.3.5.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * User generated by hbm2java
 */
@Entity
@Table(name = "user", catalog = "crowdfunding")
public class User implements java.io.Serializable {

	private Integer userId;
	private Role role;
	private String FName;
	private String LName;
	private String username;
	private String password;
	private String emailId;
	private Date createdOn;
	private Date dob;
	private Set<Testimonial> testimonials = new HashSet<Testimonial>(0);
	private Set<Funding> fundings = new HashSet<Funding>(0);
	private Set<Project> projects = new HashSet<Project>(0);
	private Set<Startup> startups = new HashSet<Startup>(0);

	public User() {
	}

	public User(Role role, String FName, String username, String password, String emailId, Date createdOn, Date dob) {
		this.role = role;
		this.FName = FName;
		this.username = username;
		this.password = password;
		this.emailId = emailId;
		this.createdOn = createdOn;
		this.dob = dob;
	}

	public User(Role role, String FName, String LName, String username, String password, String emailId, Date createdOn,
			Date dob, Set<Testimonial> testimonials, Set<Funding> fundings, Set<Project> projects,
			Set<Startup> startups) {
		this.role = role;
		this.FName = FName;
		this.LName = LName;
		this.username = username;
		this.password = password;
		this.emailId = emailId;
		this.createdOn = createdOn;
		this.dob = dob;
		this.testimonials = testimonials;
		this.fundings = fundings;
		this.projects = projects;
		this.startups = startups;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "user_id", unique = true, nullable = false)
	public Integer getUserId() {
		return this.userId;
	}

	public void setUserId(Integer userId) {
		this.userId = userId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "role_id", nullable = false)
	public Role getRole() {
		return this.role;
	}

	public void setRole(Role role) {
		this.role = role;
	}

	@Column(name = "f_name", nullable = false)
	public String getFName() {
		return this.FName;
	}

	public void setFName(String FName) {
		this.FName = FName;
	}

	@Column(name = "l_name")
	public String getLName() {
		return this.LName;
	}

	public void setLName(String LName) {
		this.LName = LName;
	}

	@Column(name = "username", nullable = false)
	public String getUsername() {
		return this.username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	@Column(name = "password", nullable = false, length = 256)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Column(name = "email_id", nullable = false)
	public String getEmailId() {
		return this.emailId;
	}

	public void setEmailId(String emailId) {
		this.emailId = emailId;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created_on", nullable = false, length = 19)
	public Date getCreatedOn() {
		return this.createdOn;
	}

	public void setCreatedOn(Date createdOn) {
		this.createdOn = createdOn;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "dob", nullable = false, length = 10)
	public Date getDob() {
		return this.dob;
	}

	public void setDob(Date dob) {
		this.dob = dob;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Testimonial> getTestimonials() {
		return this.testimonials;
	}

	public void setTestimonials(Set<Testimonial> testimonials) {
		this.testimonials = testimonials;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Funding> getFundings() {
		return this.fundings;
	}

	public void setFundings(Set<Funding> fundings) {
		this.fundings = fundings;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Project> getProjects() {
		return this.projects;
	}

	public void setProjects(Set<Project> projects) {
		this.projects = projects;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Startup> getStartups() {
		return this.startups;
	}

	public void setStartups(Set<Startup> startups) {
		this.startups = startups;
	}

}
